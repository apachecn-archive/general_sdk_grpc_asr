cmake_minimum_required(VERSION 3.6)

project(grpc_asr_demo VERSION 1.0.0)

set(CMAKE_C_STANDARD                99)
set(CMAKE_CXX_STANDARD              11)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

include_directories( ${CMAKE_CURRENT_LIST_DIR}/include)

message(${CMAKE_INSTALL_PREFIX})

if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
	if (CMAKE_CL_64)
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Windows/x64/ssasr.lib)
		else()
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Linux/x64/libssasr.so)
		endif()
	else()
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Windows/x86/ssasr.lib)
		else()
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Linux/x86/libssasr.so)
		endif()
	endif()
elseif(${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
	if(${CMAKE_C_FLAGS} MATCHES "-m32")
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Windows/x86/ssasr.lib)
		else()
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Linux/x86/libssasr.so)
		endif()
	else()
		if(${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Windows/x64/ssasr.lib)
		else()
			set(libssasr ${CMAKE_CURRENT_LIST_DIR}/lib/Linux/x64/libssasr.so)
		endif()
	endif()
endif()

add_executable(grpc_asr_demo ${CMAKE_CURRENT_LIST_DIR}/src/grpc_asr.cpp)

if(libssasr)
	if(NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
		target_link_libraries(grpc_asr_demo pthread)
	endif()
	target_link_libraries(grpc_asr_demo ${libssasr})
else()
	message(FATAL_ERROR "libssasr not exist")
endif()
